find.package("devtools")
cd
ls
cls
find.package("devtools")
find.package(devtools)
install.packages("devtools")
library(devtools)
find_rtools()
install.packages("KernSmooth")
library(KernSmooth)
library(datasets)
data(iris)
?irsi
?iris
str(iris)
vir <- filter(iris, Species = 'virginica')
vir <- filter(iris, Species == 'virginica')
vir <- filter(iris, iris$Species == 'virginica')
str(vir)
vir <- iris(filter(iris, iris$Species == 'virginica'))
vir <- iris[filter(iris, iris$Species == 'virginica')]
str(vir)
q()
csvUrl = "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
gdf <- read.csv(url(csvUrl))
str(gdf)
colnames(gdf)
csv2Url = "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
edf <- read.csv(url(csv2Url))
head(gdf)
head(edf)
ls()
names(gdf)
names(edf)
?merge
x <- merge(gdf, edf, by.x="x", by.y = "CountryCode")
x <- merge(gdf, edf, by.x="X", by.y = "CountryCode", all = FALSE)
length(x)
str(x)
x <- merge(gdf, edf, by.x="X", by.y = "CountryCode", all = TRUE)
str(x)
tail(gdf)
head(gdf)
head(edf)
x <- merge(gdf, edf, by.x="X", by.y = "CountryCode", all = FALSE)
str(x)
head(X)
head(x)
head(x, 10)
head(gdf, 10)
head(edf, 10)
str(gdf)
str(edf)
x <- merge(gdf, edf, by.x="X", by.y = "CountryCode", all = FALSE)
str(X)
str(x)
x <- complete.cases(x)
str(x)
names(edf)
names(gdf)
head(gdf, 10)
head(edf, 10)
tail(gdf, 10)
dplyr::distinct(gdf$X)
dplyr::distinct(gdf)
dplyr::distinct(edf)
names(gdf)
summary(gdf)
str(gdf)
head(gdf, 10)
names(gdf)
?read.csv
gdf <- read.csv(url(csvUrl), skip = 4, header = FALSE)
head(gdf, 10)
gdf <- read.csv(url(csvUrl), skip = 5, header = FALSE)
head(gdf, 10)
head(edf, 10)
str(gdf)
head(gdf, 10)
gdf <- dplyr::filter(gdf, V2 >= 1)
gdf <- dplyr::filter(gdf, as.numeric(V2) >= 1)
str(gdf)
head(gdf, 10)
gdf <- read.csv(url(csvUrl), skip = 5, header = FALSE)
head(gdf, 10)
summary(gdf)
str(gdf)
gdf <- read.csv(url(csvUrl), skip = 5,
header = FALSE, na.strings = "Not Available")
str(gdf)
gdf <- read.csv(url(csvUrl), skip = 5,
header = FALSE, na.strings = "Not available")
str(gdf)
gdf <- read.csv(url(csvUrl), skip = 5,
header = FALSE, na.strings = "Not available.")
str(gdf)
unique(gdf$V2)
gdf[,2] <- as.numeric(gdf[,2])
unique(gdf$V2)
summary(gdf)
str(gdf)
gdf <- dplyr::filter(gdf, V2 >= 1)
str(gdf)
x <- merge(gdf, edf, by.x="X", by.y = "CountryCode", all = FALSE)
x <- merge(gdf, edf, by.x="V1", by.y = "CountryCode", all = FALSE)
str(x)
head(gdf, 10)
library(dplyr)
gdf <- dplyr::filter(gdf, V2 >= 1)
gdf <- dplyr::arrange(gdf, v2)
gdf <- dplyr::arrange(gdf, V2)
str(gdf)
head(gdf, 10)
gdf <- read.csv(url(csvUrl),
sep = ",",
skip = 5,
nrows = 195,
header = FALSE)
gdf[,2] <- as.numeric(gdf[,2])
str(gdf)
gdf <- read.csv(url(csvUrl),
sep = ",",
skip = 5,
nrows = 190,
header = FALSE)
gdf <- dplyr::arrange(gdf, V2)
str(gdf)
edf <- read.csv(url(csv2Url))
x <- merge(gdf, edf, by.x="V1", by.y = "CountryCode", all = FALSE)
head(edf, 10)
str(x)
x[13,]
gdf <- dplyr::arrange(gdf, desc(V2))
edf <- read.csv(url(csv2Url))
x <- merge(gdf, edf, by.x="V1", by.y = "CountryCode", all = FALSE)
x[13,]
x <- dplyr::arrange(x, desc(V2))
x[13,]
str(x)
x[13,]
names(edf)
unique(x$Income.Group)
x %>% group_by(Income.Group) %>% summarise(mean(V2))
quantile(x$V2)
x = mutate(x, gpdGroup = cut2(V2, g=5))
?cut2
library(Hmisc)
install.packages("Hmisc")
library(Hmisc)
x = mutate(x, gpdGroup = cut2(V2, g=5))
table(x$Income.Group)
table(x$gpdGroup)
unique(x$gpdGroup)
x$gpdGroup
x$gpdGroup >= 154
?melt
table(x$gpdGroup)
?cut2
x = mutate(x, gpdGroup = cut2(V2, g=5))
table(x$gpdGroup)
table(x$Income.Group)
y <- subset(x, V2 >= quantile(V2, 0.8))
table(y$Income.Group)
y <- subset(x, V2 <= quantile(V2, 0.8))
table(y$Income.Group)
y <- subset(x, V2 >= quantile(V2, 0.8))
table(y$gpdGroup)
table(y$Income.Group)
x %>% group_by(Income.Group) %>% summarise(mean(V2)) ## 32.966, 91.913
x = mutate(x, gpdGroup = cut2(V2, g=5))
str(x)
y <- dplyr::filter(x, gdpGroup == 5)
names(x)
y = dplyr::filter(x, gdpGroup == 5)
x %>% dplyr::filter(gpdGroup == 5)
x %>% dplyr::filter(gpdGroup == 5)
names(x)
table(x)
x = mutate(x, gpdGroup = cut2(V2, g=5))
x$gpdGroup
names(x$gpdGroup)
x$gpdGroup
str(x)
x = mutate(x, gpdGroup = cut2(V2, g=5, onlycuts = TRUE))
x = mutate(x, gpdGroup = cut2(V2, g=5))
x = mutate(x, gpdGroup = cut2(V2, g=5))
x[Income.Group == "Lower middle income", .N,
by = c("Income.Group","gpdGroup")]
x[Income.Group == "Lower middle income", .N, by = c("Income.Group","gpdGroup")]
x[Income.Group == "Lower middle income"] ##, .N, by = c("Income.Group","gpdGroup")]
x[Income.Group == "Lower middle income"] ##, .N, by = c("Income.Group","gpdGroup")]
x[x$Income.Group == "Lower middle income"] ##, .N, by = c("Income.Group","gpdGroup")]
names(x)
x[Income.Group == "x"]
x[x$Income.Group == "x"]
x[x$Income.Group == "Lower middle income"]
x[x$Income.Group == "Lower middle income"]
table(x$Income.Group)
breaks <- quantile(x$V2, probs = seq(0, 1, 0.2), na.rm = TRUE)
x$quantileGDP <- cut(x$rankingGDP, breaks = breaks)
x$quantileGDP <- cut(x$V2, breaks = breaks)
x[Income.Group == "Lower middle income", .N,
by = c("Income.Group", "quantileGDP")]
x[Income.Group == "Lower middle income", .N, by = c("Income.Group", "quantileGDP")]
x[Income.Group == "Lower middle income", .N, by = c("Income.Group", "quantileGDP")]
x = mutate(x, gpdGroup = cut2(V2, g=5))
x <- merge(gdf, edf, by.x="V1", by.y = "CountryCode", all = FALSE)
x <- dplyr::arrange(x, desc(V2))
x %>% group_by(Income.Group) %>% summarise(mean(V2)) ## 32.966, 91.913
x = mutate(x, gdpGroup = cut2(V2, g=5))
?split
split(x, gdpGroup)
x = mutate(x, gdpGroup = cut2(V2, g=5))
split(x, gdpGroup)
split(x, x$gdpGroup)
head(x, 10)
str(x)
summary(X)
summary(x)
x %>% filter(Income.Group %in% "Lower middle income")
x <- x %>% filter(Income.Group %in% "Lower middle income")
table(x$Income.Group)
table(x$gdpGroup)
?codebook
trainingset <- read.table(".\\UCI HAR Dataset\\train\\X_train.txt")
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
?lattice
?panel.abline()
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
?par()
trellis.par.set()
?trellis.par.set()
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
install.packages("ggplot2")
library(ggplot2)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(ggplot2)
library(ggplot2movies)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies)
library(ggplot2)
qplot(votes, rating, data = movies)
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2movies)
qplot(votes, rating, data = movies)
library(ggplot2)
library(ggplot2movies)
qplot(votes, rating, data = movies)
install.packages("ggplot2movies")
library(ggplot2)
library(ggplot2movies)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies, smooth = "loess")
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality)
?transform()
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
?llines()
?lines()
setwd(".\\Coursera")
dir()
setwd(".\\RepData_PeerAssessment1")
dir()
library(lubridate)
library(dplyr)
library(ggplot2)
library(mice)
## Loading and preprocessing the data
filename <- "activity.csv"
df <- read.csv(filename, header=TRUE, na.strings="NA", sep=",",
stringsAsFactors = FALSE)
df$date <- ymd(df$date) ## convert to date datatype
## What is the mean total number of steps taken per day?
sumsteps <- df %>%
filter(!is.na(steps)) %>%
group_by(date) %>%
summarise(steps = sum(steps))
summary(sumsteps)
head(sumsteps)
sum(stumsteps$steps)
sum(sumsteps$steps)
sum(df$steps)
sum(na.omit(df$steps)
)
library(lubridate)
library(dplyr)
library(ggplot2)
library(mice)
filename <- "activity.csv"
if (!file.exists(filename)) {
unzip("activity.zip") # unzip file data
}
df <- read.csv(filename, header=TRUE, na.strings="NA", sep=",", stringsAsFactors = FALSE)
df$date <- ymd(df$date) # convert to date datatype
sumsteps <- df %>%
filter(!is.na(steps)) %>% ## ignore missing values
group_by(date) %>%
summarise(steps = sum(steps)) ## total steps per day
# qplot(date, data=sumsteps, geom="histogram", weight=steps, ylab="Steps", binwidth=1)
qplot(steps, data=sumsteps, geom="histogram", xlab="Total Steps Taken per Day")
summary(sumsteps$steps) ## Median / Mean to total steps per day
avgsteps <- df %>%
filter(!is.na(steps)) %>% ## ignore missing values
group_by(interval) %>%
summarise(steps = mean(steps)) %>% ## avg steps per interval
arrange(desc(steps)) ## sort by steps descending
qplot(interval, steps, data=avgsteps, geom="line")
head(avgsteps,1) ## interval 835 averages the most steps
df2 <- df
md.pattern(df2) ## 2304 rows with NAs
df2[is.na(df2),"steps"] <- ## impute missing steps with interval mean
do.call(rbind, sapply(df2[is.na(df2),"interval"], function(x){
avgsteps[avgsteps$interval==x,"steps"]}))
sumsteps2 <- df2 %>%
group_by(date) %>%
summarise(steps = sum(steps)) ## total steps per day
qplot(date, data=sumsteps2, geom="histogram", weight=steps, ylab="Steps", binwidth=1)
summary(sumsteps2$steps)
df2$weekday <- sapply(df2$date, function(x){
if(weekdays(x) %in% c("Saturday","Sunday")){
"weekend"
}else{
"weekday"
}}) ## Create weekend/weekday factor variable
avgsteps2 <- df2 %>%
group_by(interval,weekday) %>%
summarise(steps = mean(steps)) ## avg steps per interval / weekday
qplot(interval,steps, data=avgsteps2, geom="line", facets=weekday~.)
sumsteps <- df %>%
filter(!is.na(steps)) %>% ## ignore missing values
group_by(date) %>%
summarise(steps = sum(steps)) ## total steps per day
# qplot(date, data=sumsteps, geom="histogram", weight=steps, ylab="Steps", binwidth=1)
# qplot(steps, data=sumsteps, geom="histogram", xlab="Total Steps Taken per Day")
hist(sumsteps$steps, xlab = "Total Steps Taken per Day")
summary(sumsteps$steps) ## Median / Mean to total steps per day
df2 <- df
md.pattern(df2) ## 2304 rows with NAs
df2[is.na(df2),"steps"] <- ## impute missing steps with interval mean
do.call(rbind, sapply(df2[is.na(df2),"interval"], function(x){
avgsteps[avgsteps$interval==x,"steps"]}))
sumsteps2 <- df2 %>%
group_by(date) %>%
summarise(steps = sum(steps)) ## total steps per day
hist(sumsteps2$steps, xlab = "Total Steps Taken per Day")
summary(sumsteps2$steps)
library(lubridate)
library(dplyr)
library(ggplot2)
library(mice)
filename <- "activity.csv"
if (!file.exists(filename)) {
unzip("activity.zip") # unzip file data
}
df <- read.csv(filename, header=TRUE, na.strings="NA", sep=",", stringsAsFactors = FALSE)
df$date <- ymd(df$date) # convert to date datatype
sumsteps <- df %>%
filter(!is.na(steps)) %>% ## ignore missing values
group_by(date) %>%
summarise(steps = sum(steps)) ## total steps per day
hist(sumsteps$steps, xlab = "Total Steps Taken per Day")
summary(sumsteps$steps) ## Median / Mean to total steps per day
avgsteps <- df %>%
filter(!is.na(steps)) %>% ## ignore missing values
group_by(interval) %>%
summarise(steps = mean(steps)) %>% ## avg steps per interval
arrange(desc(steps)) ## sort by steps descending
qplot(interval, steps, data=avgsteps, geom="line")
head(avgsteps,1) ## interval 835 averages the most steps
df2 <- df
md.pattern(df2) ## 2304 rows with NAs
df2[is.na(df2),"steps"] <- ## impute missing steps with interval mean
do.call(rbind, sapply(df2[is.na(df2),"interval"], function(x){
avgsteps[avgsteps$interval==x,"steps"]}))
sumsteps2 <- df2 %>%
group_by(date) %>%
summarise(steps = sum(steps)) ## total steps per day
hist(sumsteps2$steps, xlab = "Total Steps Taken per Day")
summary(sumsteps2$steps)
df2$weekday <- sapply(df2$date, function(x){
if(weekdays(x) %in% c("Saturday","Sunday")){
"weekend"
}else{
"weekday"
}}) ## Create weekend/weekday factor variable
avgsteps2 <- df2 %>%
group_by(interval,weekday) %>%
summarise(steps = mean(steps)) ## avg steps per interval / weekday
qplot(interval,steps, data=avgsteps2, geom="line", facets=weekday~.)
